# Build stage
FROM python:3.9-slim AS builder

WORKDIR /build

# Install build dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl \
    gcc \
    g++ \
    python3-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Set build environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install Python packages
COPY requirements.streamlit.txt /build/requirements.txt
RUN pip install --user --no-cache-dir -r requirements.txt

# Runtime stage
FROM python:3.9-slim

WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /root/.local/lib/python3.9/site-packages /usr/local/lib/python3.9/site-packages

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# Create necessary directories
RUN mkdir -p /app/dashboard

# Copy dashboard files
COPY dashboard /app/dashboard/

# Create startup script with proper error handling
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "Starting Streamlit service..."\n\
\n\
# Wait for dependencies\n\
echo "Waiting for dependencies..."\n\
sleep 5\n\
\n\
# Verify Python environment\n\
echo "Verifying Python environment..."\n\
if ! python3 -c "import streamlit; import pandas; import numpy; print(\"Environment verified\")"; then\n\
    echo "Failed to verify Python environment"\n\
    exit 1\n\
fi\n\
\n\
echo "Starting Streamlit application..."\n\
exec streamlit run /app/dashboard/main.py --server.port=8501 --server.address=0.0.0.0\n\
' > /app/start.sh && \
    chmod +x /app/start.sh

# Expose port
EXPOSE 8501

# Health check with increased intervals
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8501/_stcore/health || exit 1

# Start Streamlit
CMD ["/app/start.sh"] 