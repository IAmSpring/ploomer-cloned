version: '3.8'

x-common-variables: &common-variables
  DATABASE_URL: postgresql://postgres:postgres@postgres:5432/saas_platform?schema=public
  REDIS_URL: redis://redis:6379
  NODE_ENV: development
  NEXTAUTH_URL: http://localhost:3000
  NEXTAUTH_SECRET: dev-secret-do-not-use-in-production

services:
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=saas_platform
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=development
        - BUILDKIT_INLINE_CACHE=1
    ports:
      - "3000:3000"
    environment:
      <<: *common-variables
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
      - /app/prisma
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  python-api:
    build:
      context: ./python
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    volumes:
      - ./python:/app
      - python_packages:/usr/local/lib/python3.9/site-packages
    environment:
      <<: *common-variables
    depends_on:
      app:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  streamlit:
    build:
      context: ./python
      dockerfile: Dockerfile.streamlit
      args:
        BUILDKIT_INLINE_CACHE: 1
    ports:
      - "8501:8501"
    volumes:
      - ./python/dashboard:/app/dashboard
    environment:
      <<: *common-variables
      PYTHONPATH: /app
    depends_on:
      python-api:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  python_packages:
    driver: local