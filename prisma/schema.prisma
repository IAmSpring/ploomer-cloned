generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Theme {
  light
  dark
  system
}

enum AccessLevel {
  basic
  admin
  full
}

enum TicketStatus {
  open
  in_progress
  resolved
  closed
}

enum TicketPriority {
  low
  medium
  high
  urgent
}

enum TicketCategory {
  technical
  billing
  account
  feature_request
  bug_report
  other
}

model User {
  id            String       @id @default(uuid())
  name          String?
  email         String       @unique
  password      String?      @db.Text
  emailVerified DateTime?
  image         String?
  role          UserRole     @default(USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  subscription  Subscription?
  activities    Activity[]
  reports       Report[]
  sharedReports SharedReport[]
  settings      UserSettings?
  createdTickets Ticket[]    @relation("TicketCreator")
  assignedTickets Ticket[]   @relation("TicketAssignee")
  messages       Message[]

  @@index([role])
}

model UserSettings {
  id                String      @id @default(uuid())
  userId           String      @unique
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme            Theme       @default(light)
  notifications    Boolean     @default(true)
  emailNotifications Boolean   @default(true)
  accessLevel      AccessLevel @default(basic)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([provider])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  stripeCustomerId     String?   @unique
  stripePriceId        String?
  stripeSubscriptionId String?   @unique
  status               String
  currentPeriodEnd     DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  description String
  timestamp   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadata    Json?    // Optional field for additional data

  @@index([userId])
  @@index([timestamp])
  @@index([type])
}

model Report {
  id          String        @id @default(cuid())
  name        String
  description String?
  filters     Json
  layout      Json
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  isPublic    Boolean       @default(false)
  shareToken  String?       @unique
  sharedWith  SharedReport[]

  @@index([userId])
}

model SharedReport {
  id        String   @id @default(cuid())
  reportId  String
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([reportId, userId])
  @@index([userId])
}

model Ticket {
  id          String        @id @default(uuid())
  title       String
  description String        @db.Text
  status      TicketStatus  @default(open)
  priority    TicketPriority @default(medium)
  category    TicketCategory
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  creatorId   String
  creator     User          @relation("TicketCreator", fields: [creatorId], references: [id])
  assigneeId  String?
  assignee    User?         @relation("TicketAssignee", fields: [assigneeId], references: [id])
  messages    Message[]
  
  metadata    Json?         // For additional ticket data
  tags        String[]      // Array of tags for categorization
  dueDate     DateTime?     // Optional due date
  resolvedAt  DateTime?     // When the ticket was resolved
  
  @@index([status])
  @@index([priority])
  @@index([category])
  @@index([creatorId])
  @@index([assigneeId])
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  isInternal Boolean @default(false)  // For internal notes
  attachments String[]  // Array of attachment URLs
  
  @@index([userId])
  @@index([ticketId])
  @@index([createdAt])
} 